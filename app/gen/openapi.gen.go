// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Todo defines model for todo.
type Todo struct {
	Content string `json:"content"`
	Title   string `json:"title"`
}

// User defines model for user.
type User struct {
	Name   string `json:"name"`
	UserId int64  `json:"userId"`
}

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse = Error

// ForbiddenResponse defines model for ForbiddenResponse.
type ForbiddenResponse = Error

// InternalServerErrorResponse defines model for InternalServerErrorResponse.
type InternalServerErrorResponse = Error

// NotFoundResponse defines model for NotFoundResponse.
type NotFoundResponse = Error

// GetUserListParams defines parameters for GetUserList.
type GetUserListParams struct {
	// Page ページ番号
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Limit 1ページあたりの表示件数
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// todoリストの一覧を取得
	// (GET /todos/{userId})
	GetTodos(ctx echo.Context, userId int64) error
	// ユーザー一覧情報取得
	// (GET /users)
	GetUserList(ctx echo.Context, params GetUserListParams) error
	// ユーザー情報取得
	// (GET /users/{userId})
	GetUser(ctx echo.Context, userId int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTodos converts echo context to params.
func (w *ServerInterfaceWrapper) GetTodos(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTodos(ctx, userId)
	return err
}

// GetUserList converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserList(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserList(ctx, params)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/todos/:userId", wrapper.GetTodos)
	router.GET(baseURL+"/users", wrapper.GetUserList)
	router.GET(baseURL+"/users/:userId", wrapper.GetUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXUWvcRhD+K2baR9k6x5cS9FjaFEPJQ9o+mcOsT+O7DZJW2d0zPg5BJVFI60JCS2LS",
	"UtIG4zoppC2lady4+TMbO86/KLt7J519Ost2TR9C/GCkvZ3vm2/mm927AbRZGLMIIynAGwBHEbNIoHl5",
	"n/jX8WYPhbw+XNarbRZJjKR+JHEc0DaRlEXuDcEivYbrJIwDC7BC/GVuEfTrGgl6QwgfwWs2Gg6EKATp",
	"IHiabWa0OUkSB0S7iyHR+9/luAoevOOWybr2U+Ei54zbAB9Fm9NYpwMeqPyxyn5V2Y7KdlV+Sz/kj1S+",
	"B4kDVxlfob6P0TmFrY7iK2UtjMsqqC5GVPbQiHqust2DnUev7985omsxksgjEnyCfA35hxrlnArpEGlZ",
	"GKhlm9Gk2stHmzhKYMaGzYwJ+c/K/1T5nsrv6P/jmq8xeZX1Iv+cQiMml1d1fGUrm+PirjE5Y7demD//",
	"MWp2Vfr14faGSrdUuqGyr1T6QqXfq+xbKHlMskUXYs5i5JJaDTZbY8uQSPB09xYugQOyH6N9xQ5yXa1C",
	"zWD0oZCcRh3DpMePcvTBW7KY5f5WAcZWbmBbaizJfFaVTFH7YwwOSCqDU3DbbU4BVUXeE1hRiYiEWMms",
	"ty/6x4v0XrOiSMeSGUY6FnsyFb2fRqumEkN9wGKMZklMZ0WMbXBgDbmwXZ+fa+h09AYSU/BgYa4x1wAH",
	"YiK7RoKryyrcgeVN9FIHTTmP+kdvMx4yp1v65OWzzw+3f1bZN/u37+2/2FTpfZVtgKHixv5aPnyE8lON",
	"bxg5CVEiF+AtDSbcuW2s+VTle4sfgJYInklyVAmvrExZLsl7OD4Z9cVuOUcvnUuNxikmuGSgEkNRN4TG",
	"qUnBTjgn/eqZLFUf5F/s//j7WD03zVhuqvSBhmraPKtYCz1uxQ1qQhfqQyevKBPZrI+cOBATBy6fJtuT",
	"bg9zEGG7x6nsg7fUckD0wpDwfr0TdddJR5jB1n1oaSxXm0dMNfd4IyzcRDum2fszgfxjKmS9w78zFM9e",
	"3X28f/uvkcVv9pD3S4/H+vCb5ujKMzZxjjPNF1QqzVT6wJzwTw5/2nm19ffL508P7v42hTygIZVnZP9f",
	"5skcvmecpyltfDtVU6ZqWu0mhso0Y2yo6q+OE4+5k+bqjbk16s399nK4eBvXGNigaHRrrR4PwIOulLHn",
	"ugFrk6DLhPSuNK403LV50B4YIlR+NUp/eX3vobWz+b3wh8q/VPkPKtsyz7dKRw6/HZxk5jOgWfu0HFif",
	"FZLFAe10jSGpnqP14R8kyb8BAAD//3+iVZ17DwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
