// Code generated by MockGen. DO NOT EDIT.
// Source: app/internal/domain/repository/user_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/internal/domain/repository/user_repository.go -destination=app/mock/repository_mock/user_mock.go -package=repository_mock
//

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	reflect "reflect"

	domain "github.com/nasunagisa/restapi/app/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
	isgomock struct{}
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockIUserRepository) GetUser(userId int64, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserRepositoryMockRecorder) GetUser(userId, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserRepository)(nil).GetUser), userId, user)
}

// GetUserList mocks base method.
func (m *MockIUserRepository) GetUserList(users *[]domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList", users)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserList indicates an expected call of GetUserList.
func (mr *MockIUserRepositoryMockRecorder) GetUserList(users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockIUserRepository)(nil).GetUserList), users)
}
